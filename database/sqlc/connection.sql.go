// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: connection.sql

package database

import (
	"context"
)

const getConnectionID = `-- name: GetConnectionID :one
SELECT id, connection_id, account_id, user_id, create_date, last_update, record_status, active, "“connected”", "“disconnected”", user_data, account_data, auth_menu, auth_keys, auth_groups, sites, clients FROM connections
where user_id = $1 LIMIT 1
`

func (q *Queries) GetConnectionID(ctx context.Context, userID int64) (Connection, error) {
	row := q.db.QueryRowContext(ctx, getConnectionID, userID)
	var i Connection
	err := row.Scan(
		&i.ID,
		&i.ConnectionID,
		&i.AccountID,
		&i.UserID,
		&i.CreateDate,
		&i.LastUpdate,
		&i.RecordStatus,
		&i.Active,
		&i.Connected,
		&i.Disconnected,
		&i.UserData,
		&i.AccountData,
		&i.AuthMenu,
		&i.AuthKeys,
		&i.AuthGroups,
		&i.Sites,
		&i.Clients,
	)
	return i, err
}

const updateConnection = `-- name: UpdateConnection :one
UPDATE connections
SET
    active =$1
where
        user_id = $2
RETURNING id, connection_id, account_id, user_id, create_date, last_update, record_status, active, "“connected”", "“disconnected”", user_data, account_data, auth_menu, auth_keys, auth_groups, sites, clients
`

type UpdateConnectionParams struct {
	Active RecordStatus `json:"active"`
	UserID int64        `json:"user_id"`
}

func (q *Queries) UpdateConnection(ctx context.Context, arg UpdateConnectionParams) (Connection, error) {
	row := q.db.QueryRowContext(ctx, updateConnection, arg.Active, arg.UserID)
	var i Connection
	err := row.Scan(
		&i.ID,
		&i.ConnectionID,
		&i.AccountID,
		&i.UserID,
		&i.CreateDate,
		&i.LastUpdate,
		&i.RecordStatus,
		&i.Active,
		&i.Connected,
		&i.Disconnected,
		&i.UserData,
		&i.AccountData,
		&i.AuthMenu,
		&i.AuthKeys,
		&i.AuthGroups,
		&i.Sites,
		&i.Clients,
	)
	return i, err
}
